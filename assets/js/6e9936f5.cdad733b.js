"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[873],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>m});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var u=r.createContext({}),l=function(e){var n=r.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=l(e.components);return r.createElement(u.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,u=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=l(t),m=a,y=d["".concat(u,".").concat(m)]||d[m]||p[m]||o;return t?r.createElement(y,i(i({ref:n},c),{},{components:t})):r.createElement(y,i({ref:n},c))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=d;var s={};for(var u in n)hasOwnProperty.call(n,u)&&(s[u]=n[u]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var l=2;l<o;l++)i[l]=t[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},3594:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var r=t(7462),a=(t(7294),t(3905));const o={},i="Observer",s={unversionedId:"docs/guides/observer",id:"docs/guides/observer",title:"Observer",description:"Any query, infinite query or mutation can be observed globally in one place.",source:"@site/docs/docs/guides/09-observer.md",sourceDirName:"docs/guides",slug:"/docs/guides/observer",permalink:"/docs/guides/observer",draft:!1,editUrl:"https://github.com/D-James-GH/cached_query/tree/main/docs/docs/docs/guides/09-observer.md",tags:[],version:"current",sidebarPosition:9,frontMatter:{},sidebar:"docs",previous:{title:"Optimistic Updates",permalink:"/docs/guides/optimistic-updates"},next:{title:"Flutter Additions",permalink:"/docs/flutter-additions"}},u={},l=[],c={toc:l};function p(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"observer"},"Observer"),(0,a.kt)("p",null,"Any query, infinite query or mutation can be observed globally in one place. "),(0,a.kt)("p",null,"To set up an observer extend ",(0,a.kt)("inlineCode",{parentName:"p"},"QueryObserver")," and set the observer on the cached query instance or as part of the config."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dart"},"void main() async {\n  WidgetsFlutterBinding.ensureInitialized();\n  CachedQuery.instance.configFlutter(\n    ...config\n    observer: Observer(),\n  );\n  runApp(const MyApp());\n}\n")),(0,a.kt)("p",null,"You can set the observer at any time."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dart"},"CachedQuery.instance.observer = Observer();\n")),(0,a.kt)("p",null,"To use an observer you must extend ",(0,a.kt)("inlineCode",{parentName:"p"},"QueryObserver"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dart"},"class Observer extends QueryObserver {\n  @override\n  void onChange(\n      QueryBase<dynamic, dynamic> query,\n      QueryState<dynamic> nextState,\n      ) {\n    debugPrint(nextState.status.toString());\n    super.onChange(query, nextState);\n  }\n}\n")),(0,a.kt)("p",null,"There are a few different methods that you can override: "),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"onQueryCreation")," - When a query or infinite query is added to cache. This will only fire once in a lifetime of a query. "),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"onQueryDeletion")," - When a query or infinite query is deleted from cache. "),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"onChange")," - When the state of a query or infinite query is changed."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"onError")," - When and error occurs in an infinite query or query."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"onMutationCreation")," - When a mutation is created. "),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"onMutationChange")," - When the state of a mutation changes."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"onMutationError")," - When an error occurs in a mutation.")))}p.isMDXComponent=!0}}]);