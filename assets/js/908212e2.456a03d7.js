"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[397],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),u=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},l=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,s=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),l=u(n),m=o,f=l["".concat(c,".").concat(m)]||l[m]||d[m]||s;return n?r.createElement(f,a(a({ref:t},p),{},{components:n})):r.createElement(f,a({ref:t},p))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var s=n.length,a=new Array(s);a[0]=l;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:o,a[1]=i;for(var u=2;u<s;u++)a[u]=n[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}l.displayName="MDXCreateElement"},8487:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>s,metadata:()=>i,toc:()=>u});var r=n(7462),o=(n(7294),n(3905));const s={},a="Optimistic Updates",i={unversionedId:"docs/guides/optimistic-updates",id:"docs/guides/optimistic-updates",title:"Optimistic Updates",description:"The onStartMutation lifecycle hook can be used to update the cache before the mutation is sent. It gets passed the same",source:"@site/docs/docs/guides/08-optimistic-updates.md",sourceDirName:"docs/guides",slug:"/docs/guides/optimistic-updates",permalink:"/docs/guides/optimistic-updates",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/docs/guides/08-optimistic-updates.md",tags:[],version:"current",sidebarPosition:8,frontMatter:{},sidebar:"docs",previous:{title:"Infinite Query",permalink:"/docs/guides/infinite-query"},next:{title:"Flutter Additions",permalink:"/docs/flutter-additions"}},c={},u=[{value:"Updating with received data",id:"updating-with-received-data",level:2}],p={toc:u};function d(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"optimistic-updates"},"Optimistic Updates"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"onStartMutation")," lifecycle hook can be used to update the cache before the mutation is sent. It gets passed the same\nargument you pass to mutate. "),(0,o.kt)("p",null,"The example below updates an infinite list and adds the new query to the start of the list. To make sure the data is in\nsync with the server it is also re-fetching the posts list once the mutation completes all in the background for improved\nUX."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},'Mutation<PostModel, PostModel>(\n  refetchQueries: ["posts"],\n  queryFn: (post) async {\n    final res = await _service.createPost(\n      title: post.title,\n      userId: post.userId,\n      body: post.body,\n    );\n    return PostModel.fromJson(res);\n  },\n  onStartMutation: (postArg) {\n    CachedQuery.instance.updateInfiniteQuery<List<PostModel>>(\n      key: "posts",\n      updateFn: (old) => [\n        [postArg, ...old![0]],\n        ...old.sublist(1).toList()\n      ],\n    );\n  },\n);\n')),(0,o.kt)("h2",{id:"updating-with-received-data"},"Updating with received data"),(0,o.kt)("p",null,"Often the response of a post request is the correct data, so you may want to update the cache after the mutation.\nUse ",(0,o.kt)("inlineCode",{parentName:"p"},"onSuccess")," to do just that."),(0,o.kt)("p",null,"The example below updated the cache after the mutation has completed using the response."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},'Mutation<PostModel, PostModel>(\n  refetchQueries: ["posts"],\n  queryFn: (post) async {\n    final res = await _service.createPost(\n      title: post.title,\n      userId: post.userId,\n      body: post.body,\n    );\n    return PostModel.fromJson(res);\n  },\n  onSuccess: (response, postArg) {\n    CachedQuery.instance.updateInfiniteQuery<List<PostModel>>(\n      key: "posts",\n      updateFn: (old) => [\n        [response, ...old![0]],\n        ...old.sublist(1).toList()\n      ],\n    );\n  },\n);\n')))}d.isMDXComponent=!0}}]);