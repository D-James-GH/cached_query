"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[845],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var d=a.createContext({}),u=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=u(e.components);return a.createElement(d.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,d=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),p=u(n),h=r,y=p["".concat(d,".").concat(h)]||p[h]||s[h]||i;return n?a.createElement(y,l(l({ref:t},c),{},{components:n})):a.createElement(y,l({ref:t},c))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=p;var o={};for(var d in t)hasOwnProperty.call(t,d)&&(o[d]=t[d]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var u=2;u<i;u++)l[u]=n[u];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},5181:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>l,default:()=>s,frontMatter:()=>i,metadata:()=>o,toc:()=>u});var a=n(7462),r=(n(7294),n(3905));const i={},l="Global Cache",o={unversionedId:"docs/guides/global-cache",id:"docs/guides/global-cache",title:"Global Cache",description:"The instance of the query cache is available through a singleton CachedQuery.instance. It has a few useful utilities on it.",source:"@site/docs/docs/guides/06-global-cache.md",sourceDirName:"docs/guides",slug:"/docs/guides/global-cache",permalink:"/docs/guides/global-cache",draft:!1,editUrl:"https://github.com/D-James-GH/cached_query/tree/main/docs/docs/docs/guides/06-global-cache.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{},sidebar:"docs",previous:{title:"Mutations",permalink:"/docs/guides/mutations"},next:{title:"Infinite Query",permalink:"/docs/guides/infinite-query"}},d={},u=[{value:"Where Query",id:"where-query",level:2},{value:"Re-fetch, Invalidate and Delete",id:"re-fetch-invalidate-and-delete",level:2},{value:"Manually Adding and Removing Queries",id:"manually-adding-and-removing-queries",level:2},{value:"Updating the Cache",id:"updating-the-cache",level:2},{value:"Query Key Filter Function",id:"query-key-filter-function",level:2}],c={toc:u};function s(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"global-cache"},"Global Cache"),(0,r.kt)("p",null,"The instance of the query cache is available through a singleton ",(0,r.kt)("inlineCode",{parentName:"p"},"CachedQuery.instance"),". It has a few useful utilities on it."),(0,r.kt)("h2",{id:"where-query"},"Where Query"),(0,r.kt)("p",null,"Where query works much like where on an iterable. It returns a list of queries and infinite queries that satisfy the\ngiven test."),(0,r.kt)("p",null,'The example below returns all queries/infinite queries whose key contains the word "Post".'),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Note: The key on a query object will always be a string")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},'final queries = CachedQuery.instance.whereQuery((query) => query.key.contains("post"));\n')),(0,r.kt)("h2",{id:"re-fetch-invalidate-and-delete"},"Re-fetch, Invalidate and Delete"),(0,r.kt)("p",null,"Use the Cached Query instance to easily invalidate or re-fetch the whole cache or a single key."),(0,r.kt)("p",null,"Refetch multiple queries at once by passing a list of keys."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},'CachedQuery.instance.refetchQueries(["posts"]);\n')),(0,r.kt)("p",null,"Invalidating will mark the specified key as stale. To invalidate the whole cache don't pass a key."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},'CachedQuery.instance.invalidateCache("posts");\n\n// Invalidate the whole cache\nCachedQuery.instance.invalidateCache();\n')),(0,r.kt)("p",null,"Deleting will remove the specified key immediately. To delete the whole cache leave the key as null."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},'// Optionally delete the stored values as well.\nCachedQuery.instance.deleteCache(key: "posts", deleteStorage: true);\n\n// Delete the whole cache\nCachedQuery.instance.deleteCache(deleteStorage: true);\n')),(0,r.kt)("h2",{id:"manually-adding-and-removing-queries"},"Manually Adding and Removing Queries"),(0,r.kt)("p",null,"You can manually add or get a query from the cache, although it is not normally necessary to add it as the query will call\nthis for you."),(0,r.kt)("p",null,"To add a query or infinite query to cache: "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"CachedQuery.instance.addQuery(query);\n")),(0,r.kt)("p",null,"To get a query or infinite query from cache:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"CachedQuery.instance.getQuery(key);\n")),(0,r.kt)("h2",{id:"updating-the-cache"},"Updating the Cache"),(0,r.kt)("p",null,"It is often useful to be able to update the cache manually, for example, when performing ",(0,r.kt)("a",{parentName:"p",href:"/docs/guides/optimistic-updates"},"optimistic updates")),(0,r.kt)("p",null,"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"updateQuery")," to update a query or an infinite query. Any changes will be emitted down the query stream.\nThe update function requires either a ",(0,r.kt)("inlineCode",{parentName:"p"},"key")," or a ",(0,r.kt)("inlineCode",{parentName:"p"},"filterFn")," to select the query to update. The ",(0,r.kt)("inlineCode",{parentName:"p"},"updateFn")," is then called with the current data and should return the new data."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},'CachedQuery.instance.updateQuery(\n  key: "posts",\n  updateFn: (dynamic old) {\n    if (old is List<List<PostModel>>) {\n      return <List<PostModel>>[\n        [newPost, ...old[0]],\n        ...old.sublist(1).toList()\n      ];\n    }\n  },\n);\n')),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"As an alternative to using ",(0,r.kt)("inlineCode",{parentName:"p"},"CachedQuery.instance.updateQuery")," you can also use the ",(0,r.kt)("inlineCode",{parentName:"p"},"whereQuery")," method in tandem with the ",(0,r.kt)("inlineCode",{parentName:"p"},"update")," method on the query object itself.  "),(0,r.kt)("p",{parentName:"admonition"},"This would have better type safety but would result in more code.\n``")),(0,r.kt)("h2",{id:"query-key-filter-function"},"Query Key Filter Function"),(0,r.kt)("p",null,"Many of the functions on the CachedQuery instance take a key or a filterFn. A key is a direct reference to a cached query where as the ",(0,r.kt)("inlineCode",{parentName:"p"},"filterFn")," allows for selecting multiple queries at once. "),(0,r.kt)("p",null,"For example, say you have a list of todos, and each todo has been fetched with the key ",(0,r.kt)("inlineCode",{parentName:"p"},'"todos/${id}"'),', if a user selects a "complete all" button then we will want to find all the todos in the cache and update them, regardless of their id.'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},'CachedQuery.instance.updateQuery(\n  updateFn: (dynamic oldData){ \n    if(oldData is Todo){\n      return oldData?.copyWith(complete: true);\n    }\n  },\n  filterFn: (unencodedKey, key) => key.startsWith("todos/"),\n);\n')),(0,r.kt)("p",null,"Notice that the ",(0,r.kt)("inlineCode",{parentName:"p"},"filterFn")," passes through two arguments; ",(0,r.kt)("inlineCode",{parentName:"p"},"unencodedKey")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"key"),". The ",(0,r.kt)("inlineCode",{parentName:"p"},"unencodedKey")," is the original key the you passed to the query. The ",(0,r.kt)("inlineCode",{parentName:"p"},"key")," is the json-encoded string of the ",(0,r.kt)("inlineCode",{parentName:"p"},"unencodedKey"),". Using the example above, if the todo keys were altered to be ",(0,r.kt)("inlineCode",{parentName:"p"},'["todo", id]')," then we could use the unencoded key to filter the queries."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},'CachedQuery.instance.updateQuery<Todo>(\n  updateFn: (dynamic oldData){ \n    if(oldData is Todo){\n      return oldData?.copyWith(complete: true);\n    }\n  },\n  filterFn: (unencodedKey, key) => unencodedKey is List && unencodedKey.first == "todo",\n);\n')))}s.isMDXComponent=!0}}]);