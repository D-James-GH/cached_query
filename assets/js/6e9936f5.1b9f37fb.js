"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[742],{8453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>c});var s=r(6540);const t={},i=s.createContext(t);function o(e){const n=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),s.createElement(i.Provider,{value:n},e.children)}},9807:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"docs/guides/observer","title":"Observer","description":"Any query, infinite query or mutation can be observed globally in one place.","source":"@site/docs/docs/guides/09-observer.md","sourceDirName":"docs/guides","slug":"/docs/guides/observer","permalink":"/docs/guides/observer","draft":false,"unlisted":false,"editUrl":"https://github.com/D-James-GH/cached_query/tree/main/docs/docs/docs/guides/09-observer.md","tags":[],"version":"current","sidebarPosition":9,"frontMatter":{},"sidebar":"docs","previous":{"title":"Optimistic Updates","permalink":"/docs/guides/optimistic-updates"},"next":{"title":"Flutter Additions","permalink":"/docs/flutter-additions"}}');var t=r(4848),i=r(8453);const o={},c="Observer",d={},a=[];function l(e){const n={code:"code",h1:"h1",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"observer",children:"Observer"})}),"\n",(0,t.jsx)(n.p,{children:"Any query, infinite query or mutation can be observed globally in one place."}),"\n",(0,t.jsxs)(n.p,{children:["To set up an observer extend ",(0,t.jsx)(n.code,{children:"QueryObserver"})," and set the observer on the cached query instance or as part of the config."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"void main() async {\n  WidgetsFlutterBinding.ensureInitialized();\n  CachedQuery.instance.configFlutter(\n    ...config\n    observer: [Observer()],\n  );\n  runApp(const MyApp());\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"You can set the observer at any time."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"CachedQuery.instance.observer = Observer();\n"})}),"\n",(0,t.jsxs)(n.p,{children:["To use an observer you must extend ",(0,t.jsx)(n.code,{children:"QueryObserver"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"class Observer extends QueryObserver {\n  @override\n  void onChange(\n      Cachable<dynamic> query,\n      QueryState<dynamic> nextState,\n      ) {\n    debugPrint(nextState.status.toString());\n    super.onChange(query, nextState);\n  }\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"There are a few different methods that you can override:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"onQueryCreation"})," - When a query or infinite query is added to cache. This will only fire once in a lifetime of a query."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"onQueryDeletion"})," - When a query or infinite query is deleted from cache."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"onChange"})," - When the state of a query or infinite query is changed."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"onError"})," - When and error occurs in an infinite query or query."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"onMutationCreation"})," - When a mutation is created."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"onMutationChange"})," - When the state of a mutation changes."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"onMutationError"})," - When an error occurs in a mutation."]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}}}]);