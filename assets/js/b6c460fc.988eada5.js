"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[825],{737:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>d,default:()=>u,frontMatter:()=>s,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"docs/flutter-additions","title":"Flutter Additions","description":"If you are using flutter there are a couple of useful additions added.","source":"@site/docs/docs/03-flutter-additions.md","sourceDirName":"docs","slug":"/docs/flutter-additions","permalink":"/docs/flutter-additions","draft":false,"unlisted":false,"editUrl":"https://github.com/D-James-GH/cached_query/tree/main/docs/docs/docs/03-flutter-additions.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{},"sidebar":"docs","previous":{"title":"Observer","permalink":"/docs/guides/observer"},"next":{"title":"Storage","permalink":"/docs/storage"}}');var r=t(4848),a=t(8453);const s={},d="Flutter Additions",o={},l=[{value:"Connection Monitoring",id:"connection-monitoring",level:2},{value:"Refetch On Resume",id:"refetch-on-resume",level:2},{value:"Builders",id:"builders",level:2},{value:"Enabling and Disabling",id:"enabling-and-disabling",level:3},{value:"QueryBuilder",id:"querybuilder",level:3},{value:"MutationBuilder",id:"mutationbuilder",level:3}];function c(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"flutter-additions",children:"Flutter Additions"})}),"\n",(0,r.jsx)(n.p,{children:"If you are using flutter there are a couple of useful additions added."}),"\n",(0,r.jsxs)(n.p,{children:["To globally configure Cached Query Flutter use ",(0,r.jsx)(n.code,{children:"CachedQuery.configFlutter"})," instead of ",(0,r.jsx)(n.code,{children:"config"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"CachedQuery.instance.configFlutter(\n  storage: await CachedStorage.ensureInitialized(),\n  config: GlobalQueryConfigFlutter(),\n);\n"})}),"\n",(0,r.jsx)(n.h2,{id:"connection-monitoring",children:"Connection Monitoring"}),"\n",(0,r.jsxs)(n.p,{children:["Cached query flutter uses the ",(0,r.jsx)(n.a,{href:"https://pub.dev/packages/connectivity_plus",children:"Connectivity Plus"}),' to monitor the connection\nstatus. If the connection changes from no-connection to valid connection Cached Query will ping example.com to verify the\nconnection status. Any Query or Infinite Query that has listeners will be considered "active". Any active queries will be\nre-fetched if the connection is restored. Use the config to turn this off.']}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"CachedQuery.instance.configFlutter(\n  config: GlobalQueryConfigFlutter(\n    refetchOnConnection: true,\n  ),\n);\n"})}),"\n",(0,r.jsx)(n.p,{children:"This can be configured in the individual query."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:'Query(\n  key: "a query key",\n  queryFn: () async => _api.getData(),\n  config: QueryConfigFlutter(\n    refetchOnResume: false,\n    refetchOnConnection: true,\n  ),\n),\n'})}),"\n",(0,r.jsx)(n.h2,{id:"refetch-on-resume",children:"Refetch On Resume"}),"\n",(0,r.jsxs)(n.p,{children:["Cached Query Flutter uses the ",(0,r.jsx)(n.code,{children:"WidgetsBindingObserver"})," to monitor the lifecycle state of the app. If the app state is\nresumed any active queries will be re-fetched. Turn this off with the global flutter config."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"CachedQuery.instance.configFlutter(\n  config: QueryConfigFlutter(\n    refetchOnResume: false,\n    refetchOnConnection: true,\n  ),\n);\n"})}),"\n",(0,r.jsx)(n.p,{children:"This can be configured in the individual query."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:'Query(\n  key: "a query key",\n  queryFn: () async => _api.getData(),\n  config: QueryConfigFlutter(\n    refetchOnResume: false,\n    refetchOnConnection: true,\n  ),\n),\n'})}),"\n",(0,r.jsx)(n.h2,{id:"builders",children:"Builders"}),"\n",(0,r.jsxs)(n.p,{children:["Three builders are added for ease of use. They act very similar to a ",(0,r.jsx)(n.code,{children:"StreamBuilder"}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"enabling-and-disabling",children:"Enabling and Disabling"}),"\n",(0,r.jsxs)(n.p,{children:["By default, the builders will subscribe to the query's listener on ",(0,r.jsx)(n.code,{children:"initState"})," and unsubscribe on ",(0,r.jsx)(n.code,{children:"dispose"}),".\nThis means that the query will be fetched when the widget is first rendered. You can prevent this using the ",(0,r.jsx)(n.code,{children:"enabled"})," flag\non the ",(0,r.jsx)(n.code,{children:"InfiniteQueryBuilder"})," and ",(0,r.jsx)(n.code,{children:"QueryBuilder"}),"."]}),"\n",(0,r.jsx)(n.admonition,{type:"warning",children:(0,r.jsx)(n.p,{children:"This will only prevent the widget from adding a listener to the query. If you have other listeners elsewhere then the\nquery will still be fetched."})}),"\n",(0,r.jsx)(n.h3,{id:"querybuilder",children:"QueryBuilder"}),"\n",(0,r.jsx)(n.p,{children:"QueryBuilder takes a query or infinite query and will call the builder method whenever the query state changes."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:'/// For a query\n QueryBuilder<QueryStatus<JokeModel?>>(\n  query: Query(\n    key: "a query key",\n    queryFn: () async => _api.getData(),\n  ),\n  builder: (context, state) {\n    return Column(\n      children: [\n        if(state.isLoading)\n          const CircularProgressIndicator(),\n        const DisplayData(data: state.data)\n      ],\n    );\n  },\n),\n/// For an infinite query\nQueryBuilder<InfiniteQueryStatus<JokeModel?>>(\n  query: InfiniteQuery(\n    key: "a query key",\n    getNextArg: (state) => state.length + 1,\n    queryFn: () async => _api.getData(),\n  ),\n  builder: (context, state) {\n    //... return widget\n  },\n),\n'})}),"\n",(0,r.jsx)(n.p,{children:"If you know that a query has already been instantiated then you can pass a key to the Query Builder instead, however this will fail if there is no query in the cache with that key."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:' QueryBuilder<QueryStatus<JokeModel>>(\n  queryKey: "a query key",\n  builder: (context, state) {\n    return Column(\n      children: [\n        if(state.isLoading)\n          const CircularProgressIndicator(),\n        const DisplayData(data: state.data)\n      ],\n    );\n  },\n),\n'})}),"\n",(0,r.jsx)(n.h3,{id:"mutationbuilder",children:"MutationBuilder"}),"\n",(0,r.jsx)(n.p,{children:"Much the same as the query builder. It will call the builder function when the mutation state changes."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:" MutationBuilder<PostModel, PostModel>(\n    mutation: _postService.createPost(),\n    builder: (context, state, mutate) {\n      // Can use the mutate() function directly in the builder.\n    },\n  ),\n"})})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>d});var i=t(6540);const r={},a=i.createContext(r);function s(e){const n=i.useContext(a);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);