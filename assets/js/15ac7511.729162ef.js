"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[931],{2572:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>s,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"docs/storage","title":"Storage","description":"The quickest way to persist queries is to use Cached Storage. But you can","source":"@site/docs/docs/04-storage.md","sourceDirName":"docs","slug":"/docs/storage","permalink":"/docs/storage","draft":false,"unlisted":false,"editUrl":"https://github.com/D-James-GH/cached_query/tree/main/docs/docs/docs/04-storage.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{},"sidebar":"docs","previous":{"title":"Flutter Additions","permalink":"/docs/flutter-additions"},"next":{"title":"Devtools Extension","permalink":"/docs/devtools"}}');var r=n(4848),o=n(8453);const s={},i="Storage",c={},d=[{value:"CachedStorage",id:"cachedstorage",level:2},{value:"Getting Started",id:"getting-started",level:3},{value:"Serialization",id:"serialization",level:3},{value:"Custom Storage",id:"custom-storage",level:2}];function l(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"storage",children:"Storage"})}),"\n",(0,r.jsxs)(t.p,{children:["The quickest way to persist queries is to use ",(0,r.jsx)(t.a,{href:"https://pub.dev/packages/cached_storage",children:"Cached Storage"}),". But you can\nalso easily implement your own."]}),"\n",(0,r.jsx)(t.h2,{id:"cachedstorage",children:"CachedStorage"}),"\n",(0,r.jsxs)(t.p,{children:["Cached Storage is built upon ",(0,r.jsx)(t.a,{href:"https://pub.dev/packages/sqflite",children:"Sqflite"})," as this allows simple asyncronus access to a\ndatabase."]}),"\n",(0,r.jsx)(t.h3,{id:"getting-started",children:"Getting Started"}),"\n",(0,r.jsx)(t.p,{children:"Initialized cached query with the storage interface. This must be initialized before any query is called."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-dart",children:"\nvoid main() async {\n  CachedQuery.instance.configFlutter(\n    storage: await CachedStorage.ensureInitialized(),\n  );\n}\n\n"})}),"\n",(0,r.jsx)(t.p,{children:"Queries will then automatically be persisted."}),"\n",(0,r.jsx)(t.h3,{id:"serialization",children:"Serialization"}),"\n",(0,r.jsxs)(t.p,{children:["Cached Storage uses ",(0,r.jsx)(t.code,{children:"jsonEncode"})," to convert the data of a query to json, which is then stored. If you are returning\ndart objects from the ",(0,r.jsx)(t.code,{children:"queryFn"})," you will need to serialized the json back into the dart object. To do this, pass a\n",(0,r.jsx)(t.code,{children:"serilizer"})," to the QueryConfig which will be used to turn the stored data back into a dart object."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-dart",children:'Query<JokeModel>(\n  key: \'joke\',\n  config: QueryConfig(\n    // Use a deserializer to transform the stored json to an object.\n    storageDeserializer: (dynamic json) =>\n        JokeModel.fromJson(json as Map<String, dynamic>),\n  ),\n  queryFn: () async {\n    final req = client.get(\n      Uri.parse("https://icanhazdadjoke.com/"),\n      headers: {"Accept": "application/json"},\n    );\n    final res = await req;\n    return JokeModel.fromJson(\n        jsonDecode(res.body) as Map<String, dynamic>,\n    );\n  },\n);\n'})}),"\n",(0,r.jsx)(t.h2,{id:"custom-storage",children:"Custom Storage"}),"\n",(0,r.jsxs)(t.p,{children:["There is no need to depend on Cached Storage if you are implementing a custom solution. To get started using a custom\nstorage solution extend ",(0,r.jsx)(t.code,{children:"StorageInterface"})," from Cached Query, shown below."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-dart",children:"/// An interface for any storage adapter.\n///\n/// Used by the [CachedStorage] plugin to save the current cache.\nabstract class StorageInterface {\n  /// Get stored data from the storage instance.\n  FutureOr<dynamic> get(String key);\n\n  /// Delete the cache at a given key.\n  void delete(String key);\n\n  /// Update or add data with a given key.\n  /// Item will be the data from a Query or Infinite Query\n  void put<T>(String key, {required T item});\n\n  /// Delete all stored data.\n  void deleteAll();\n\n  /// Close and clean up the storage instance.\n  void close();\n}\n"})}),"\n",(0,r.jsxs)(t.p,{children:["For a further example of implementing the storage interface look at the source code for Cached Storage:\n",(0,r.jsx)(t.a,{href:"https://github.com/D-James-GH/cached_query/blob/main/packages/cached_storage/lib/cached_storage.dart",children:"Source Code"})]})]})}function h(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>i});var a=n(6540);const r={},o=a.createContext(r);function s(e){const t=a.useContext(o);return a.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),a.createElement(o.Provider,{value:t},e.children)}}}]);