"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[76],{1346:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"examples/simple-query","title":"Simple Query Example","description":"For this example we will walk through the simplest form of caching with Cached Query.","source":"@site/docs/examples/01-simple-query.md","sourceDirName":"examples","slug":"/examples/simple-query","permalink":"/examples/simple-query","draft":false,"unlisted":false,"editUrl":"https://github.com/D-James-GH/cached_query/tree/main/docs/docs/examples/01-simple-query.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{},"sidebar":"examples","previous":{"title":"Overview","permalink":"/examples/overview"},"next":{"title":"Flutter Bloc Query","permalink":"/examples/with-flutter-bloc"}}');var i=t(4848),r=t(8453);const o={},l="Simple Query Example",a={},d=[{value:"The Setup",id:"the-setup",level:2},{value:"Creating the Query",id:"creating-the-query",level:2},{value:"Post Model",id:"post-model",level:3},{value:"The UI",id:"the-ui",level:2},{value:"Post Widget",id:"post-widget",level:3}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"simple-query-example",children:"Simple Query Example"})}),"\n",(0,i.jsx)(n.p,{children:"For this example we will walk through the simplest form of caching with Cached Query."}),"\n",(0,i.jsxs)(n.p,{children:["We will use the ",(0,i.jsx)(n.a,{href:"https://jsonplaceholder.typicode.com/",children:"Json Placeholder Api"})," with a time delay to demonstrate\ncached data."]}),"\n",(0,i.jsxs)(n.p,{children:["The source code for this example can be found here: ",(0,i.jsx)(n.a,{href:"https://github.com/D-James-GH/cached_query/tree/main/examples/simple_caching",children:"https://github.com/D-James-GH/cached_query/tree/main/examples/simple_caching"})]}),"\n",(0,i.jsx)(n.h2,{id:"the-setup",children:"The Setup"}),"\n",(0,i.jsx)(n.p,{children:"Install the package."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"flutter pub add cached_query_flutter\n"})}),"\n",(0,i.jsx)(n.p,{children:"The setup is optional but to take full advantage of cached query we need to call the config function as early as possible."}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"config"})," function lets cached query know that it should re-fetch queries if the connectivity is established and if\nthe app comes back into view."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"void main() {\n  WidgetsFlutterBinding.ensureInitialized();\n  CachedQuery.instance.configFlutter(\n    config: QueryConfigFlutter(\n      refetchOnResume: true,\n      refetchOnConnection: true,\n    ),\n  );\n  runApp(const MyApp());\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"The main app will just consist of one page."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"class MyApp extends StatelessWidget {\n  const MyApp({Key? key}) : super(key: key);\n  // This widget is the root of your application.\n  @override\n  Widget build(BuildContext context) {\n    return const MaterialApp(\n      title: 'Flutter Demo',\n      home: PostPage(),\n    );\n  }\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"creating-the-query",children:"Creating the Query"}),"\n",(0,i.jsxs)(n.p,{children:["We create a service function which returns a ",(0,i.jsx)(n.code,{children:"Query"})," for us to display. The ",(0,i.jsx)(n.code,{children:"queryFn"})," is where the logic for the request\nneeds to go. This function will be first called when a listener is added to the query stream."]}),"\n",(0,i.jsx)(n.p,{children:"As the app is going to fetch a post by an id we have to add the id to the query key as well. The helper function below\nreturns a key which includes the post id."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:'String postKey(int id) => "postKey$id";\n'})}),"\n",(0,i.jsx)(n.p,{children:"Each time the query key changes a new query will be created."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"\nQuery<PostModel> getPostById(int id) {\n  return Query<PostModel>(\n    key: postKey(id),\n    queryFn: () async {\n      final uri = Uri.parse(\n        'https://jsonplaceholder.typicode.com/posts/$id',\n      );\n      final res = await http.get(uri);\n      return Future.delayed(\n        const Duration(milliseconds: 500),\n        () => PostModel.fromJson(\n          jsonDecode(res.body) as Map<String, dynamic>,\n        ),\n      );\n    },\n  );\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"post-model",children:"Post Model"}),"\n",(0,i.jsx)(n.p,{children:"This post model is a simple object that we serialize the json payload into."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:'class PostModel {\n  final String title;\n  final int id;\n  final String body;\n  final int userId;\n\n  PostModel({\n    required this.title,\n    required this.id,\n    required this.body,\n    required this.userId,\n  });\n\n  factory PostModel.fromJson(Map<String, dynamic> json) => PostModel(\n    title: json["title"],\n    body: json["body"],\n    id: json["id"],\n    userId: json["userId"],\n  );\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"the-ui",children:"The UI"}),"\n",(0,i.jsx)(n.p,{children:"The UI will consist of one page. This page will keep the current post id in local state and then increment or decrement\nthe post id if the user chooses."}),"\n",(0,i.jsxs)(n.p,{children:["We are passing the ",(0,i.jsx)(n.code,{children:"QueryBuilder"})," the query created above. The builder will call the builder function whenever a new\n",(0,i.jsx)(n.code,{children:"QueryState"})," is emitted."]}),"\n",(0,i.jsxs)(n.p,{children:["Two query builders are being used, one in the app bar to display the loading and one in the body to display the post. Given\nthe same ",(0,i.jsx)(n.strong,{children:"id"})," ",(0,i.jsx)(n.code,{children:"getPostById"})," will always return the same instance of ",(0,i.jsx)(n.code,{children:"Query"})," and therefore there is no need to store the\nquery in a variable. We can just use ",(0,i.jsx)(n.code,{children:"getPostById"})," in multiple places."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:'class PostPage extends StatefulWidget {\n  const PostPage({Key? key}) : super(key: key);\n\n  @override\n  State<PostPage> createState() => _PostPageState();\n}\n\nclass _PostPageState extends State<PostPage> {\n  int currentId = 50;\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        centerTitle: true,\n        title: QueryBuilder(\n          query: service.getPostById(currentId),\n          builder: (context, state) {\n            return Text(\n              state.status == QueryStatus.loading ? "loading..." : "",\n            );\n          },\n        ),\n        actions: [\n          IconButton(\n            icon: const Icon(Icons.refresh),\n            onPressed: _refreshPost,\n          )\n        ],\n      ),\n      body: Center(\n        child: Column(\n          children: [\n            Row(\n              mainAxisAlignment: MainAxisAlignment.center,\n              children: [\n                IconButton(\n                  onPressed: () => setState(() => currentId = currentId - 1),\n                  icon: const Icon(Icons.arrow_left),\n                ),\n                Text(currentId.toString()),\n                IconButton(\n                  onPressed: () => setState(() => currentId = currentId + 1),\n                  icon: const Icon(Icons.arrow_right),\n                ),\n              ],\n            ),\n            Post(id: currentId),\n          ],\n        ),\n      ),\n    );\n  }\n\n  void _refreshPost() {\n    service.getPostById(currentId).refetch();\n  }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"post-widget",children:"Post Widget"}),"\n",(0,i.jsx)(n.p,{children:"The Post widget is just responsible for displaying the post with a given id."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:'class Post extends StatelessWidget {\n  final int id;\n\n  const Post({required this.id, super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return QueryBuilder<PostModel>(\n      // Can use key if the query already exists.\n      queryKey: service.postKey(id),\n      builder: (context, state) {\n        final data = state.data;\n        if (state.error != null) return Text(state.error.toString());\n        if (data == null) return const SizedBox();\n        return Container(\n          margin: const EdgeInsets.all(10),\n          child: Column(\n            children: [\n              const Text(\n                "Title",\n                textAlign: TextAlign.center,\n                style: TextStyle(fontSize: 20),\n              ),\n              Text(\n                data.title,\n                textAlign: TextAlign.center,\n              ),\n              const Text(\n                "Body",\n                textAlign: TextAlign.center,\n                style: TextStyle(fontSize: 20),\n              ),\n              Text(\n                data.body,\n                textAlign: TextAlign.center,\n              ),\n            ],\n          ),\n        );\n      },\n    );\n  }\n}\n'})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>l});var s=t(6540);const i={},r=s.createContext(i);function o(e){const n=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);