"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[462],{4838:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"docs/guides/optimistic-updates","title":"Optimistic Updates","description":"The onStartMutation lifecycle hook can be used to update the cache before the mutation is sent. It gets passed the same","source":"@site/docs/docs/guides/08-optimistic-updates.md","sourceDirName":"docs/guides","slug":"/docs/guides/optimistic-updates","permalink":"/docs/guides/optimistic-updates","draft":false,"unlisted":false,"editUrl":"https://github.com/D-James-GH/cached_query/tree/main/docs/docs/docs/guides/08-optimistic-updates.md","tags":[],"version":"current","sidebarPosition":8,"frontMatter":{},"sidebar":"docs","previous":{"title":"Infinite Query","permalink":"/docs/guides/infinite-query"},"next":{"title":"Observer","permalink":"/docs/guides/observer"}}');var a=n(4848),i=n(8453);const o={},r="Optimistic Updates",d={},c=[{value:"Updating with received data",id:"updating-with-received-data",level:2}];function l(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"optimistic-updates",children:"Optimistic Updates"})}),"\n",(0,a.jsxs)(t.p,{children:["The ",(0,a.jsx)(t.code,{children:"onStartMutation"})," lifecycle hook can be used to update the cache before the mutation is sent. It gets passed the same\nargument you pass to mutate."]}),"\n",(0,a.jsx)(t.p,{children:"The example below updates an infinite list and adds the new query to the start of the list."}),"\n",(0,a.jsx)(t.p,{children:"There are a few steps to note:"}),"\n",(0,a.jsxs)(t.ol,{children:["\n",(0,a.jsx)(t.li,{children:"Take a snapshot of the current data to use as a fallback in case the mutation fails. The fallback can be any data,\nbut usually it's best to use the current data."}),"\n",(0,a.jsx)(t.li,{children:"Update the infinite query data to add the new post to the start of the list."}),"\n",(0,a.jsx)(t.li,{children:"Return the snapshot of the current data as the fallback."}),"\n"]}),"\n",(0,a.jsxs)(t.p,{children:["Inside ",(0,a.jsx)(t.code,{children:"onError"})," the fallback is used to restore the cache if the mutation fails."]}),"\n",(0,a.jsxs)(t.p,{children:["Finally, the ",(0,a.jsx)(t.code,{children:"invalidateQueries"})," prop is used to invalidate the posts query after the mutation has completed successfully.\nThis will ensure the list is re-fetched and in sync with the server. If the list has been updated correctly the user should\nnot notice any change when the list is refetched."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-dart",children:'Mutation<PostModel, PostModel> createPost() {\n  return Mutation<PostModel, PostModel>(\n    key: "createPost",\n    invalidateQueries: [\'posts\'],\n    mutationFn: (post) async {\n      final res = await Future.delayed(\n        const Duration(milliseconds: 400),\n        () => {\n          "id": 123,\n          "title": post.title,\n          "userId": post.userId,\n          "body": post.body,\n        },\n      );\n      return PostModel.fromJson(res);\n    },\n    onStartMutation: (newPost) {\n      final query = CachedQuery.instance\n          .getQuery<InfiniteQuery<List<PostModel>, int>>("posts");\n\n      final fallback = query?.state.data;\n\n      query?.update(\n        (old) {\n          return InfiniteQueryData(\n            args: old?.args ?? [],\n            pages: [\n              [newPost, ...?old?.pages.first],\n              ...?old?.pages.sublist(1),\n            ],\n          );\n        },\n      );\n\n      return fallback;\n    },\n    onError: (arg, error, fallback) {\n      if (fallback != null) {\n        CachedQuery.instance\n            .getQuery<InfiniteQuery<List<PostModel>, int>>("posts")\n            ?.update(\n              (old) => fallback as InfiniteQueryData<List<PostModel>, int>,\n            );\n      }\n    },\n  );\n}\n'})}),"\n",(0,a.jsx)(t.h2,{id:"updating-with-received-data",children:"Updating with received data"}),"\n",(0,a.jsxs)(t.p,{children:["Often the response of a post request is the correct data, so you may want to update the cache after the mutation.\nUse ",(0,a.jsx)(t.code,{children:"onSuccess"})," to do just that."]}),"\n",(0,a.jsx)(t.p,{children:"The example below updated the cache after the mutation has completed using the response."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-dart",children:'Mutation<PostModel, PostModel>(\n  queryFn: (post) async {\n    ...\n  },\n  onSuccess: (response, postArg) {\n    CachedQuery.instance.updateQuery(\n      key: "posts",\n      updateFn: (dynamic old) {\n        return InfiniteQueryData(\n          args: old?.args ?? [],\n          pages: [\n            [newPost, ...?old?.pages.first],\n            ...?old?.pages.sublist(1),\n          ],\n        );\n      }\n    );\n  },\n);\n'})})]})}function u(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>r});var s=n(6540);const a={},i=s.createContext(a);function o(e){const t=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),s.createElement(i.Provider,{value:t},e.children)}}}]);